// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alexey-step/rocket-factory/notification/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// TelegramService is an autogenerated mock type for the TelegramService type
type TelegramService struct {
	mock.Mock
}

type TelegramService_Expecter struct {
	mock *mock.Mock
}

func (_m *TelegramService) EXPECT() *TelegramService_Expecter {
	return &TelegramService_Expecter{mock: &_m.Mock}
}

// SendAssembledNotification provides a mock function with given fields: ctx, assembled
func (_m *TelegramService) SendAssembledNotification(ctx context.Context, assembled model.ShipAssembled) error {
	ret := _m.Called(ctx, assembled)

	if len(ret) == 0 {
		panic("no return value specified for SendAssembledNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ShipAssembled) error); ok {
		r0 = rf(ctx, assembled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelegramService_SendAssembledNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAssembledNotification'
type TelegramService_SendAssembledNotification_Call struct {
	*mock.Call
}

// SendAssembledNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - assembled model.ShipAssembled
func (_e *TelegramService_Expecter) SendAssembledNotification(ctx interface{}, assembled interface{}) *TelegramService_SendAssembledNotification_Call {
	return &TelegramService_SendAssembledNotification_Call{Call: _e.mock.On("SendAssembledNotification", ctx, assembled)}
}

func (_c *TelegramService_SendAssembledNotification_Call) Run(run func(ctx context.Context, assembled model.ShipAssembled)) *TelegramService_SendAssembledNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ShipAssembled))
	})
	return _c
}

func (_c *TelegramService_SendAssembledNotification_Call) Return(_a0 error) *TelegramService_SendAssembledNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelegramService_SendAssembledNotification_Call) RunAndReturn(run func(context.Context, model.ShipAssembled) error) *TelegramService_SendAssembledNotification_Call {
	_c.Call.Return(run)
	return _c
}

// SendPaidNotification provides a mock function with given fields: ctx, paid
func (_m *TelegramService) SendPaidNotification(ctx context.Context, paid model.OrderPaid) error {
	ret := _m.Called(ctx, paid)

	if len(ret) == 0 {
		panic("no return value specified for SendPaidNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderPaid) error); ok {
		r0 = rf(ctx, paid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelegramService_SendPaidNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPaidNotification'
type TelegramService_SendPaidNotification_Call struct {
	*mock.Call
}

// SendPaidNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - paid model.OrderPaid
func (_e *TelegramService_Expecter) SendPaidNotification(ctx interface{}, paid interface{}) *TelegramService_SendPaidNotification_Call {
	return &TelegramService_SendPaidNotification_Call{Call: _e.mock.On("SendPaidNotification", ctx, paid)}
}

func (_c *TelegramService_SendPaidNotification_Call) Run(run func(ctx context.Context, paid model.OrderPaid)) *TelegramService_SendPaidNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderPaid))
	})
	return _c
}

func (_c *TelegramService_SendPaidNotification_Call) Return(_a0 error) *TelegramService_SendPaidNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelegramService_SendPaidNotification_Call) RunAndReturn(run func(context.Context, model.OrderPaid) error) *TelegramService_SendPaidNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelegramService creates a new instance of TelegramService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramService {
	mock := &TelegramService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
