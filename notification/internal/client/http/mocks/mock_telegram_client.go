// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TelegramClient is an autogenerated mock type for the TelegramClient type
type TelegramClient struct {
	mock.Mock
}

type TelegramClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TelegramClient) EXPECT() *TelegramClient_Expecter {
	return &TelegramClient_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: ctx, chatId, message
func (_m *TelegramClient) SendMessage(ctx context.Context, chatId int64, message string) error {
	ret := _m.Called(ctx, chatId, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, chatId, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelegramClient_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type TelegramClient_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - chatId int64
//   - message string
func (_e *TelegramClient_Expecter) SendMessage(ctx interface{}, chatId interface{}, message interface{}) *TelegramClient_SendMessage_Call {
	return &TelegramClient_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, chatId, message)}
}

func (_c *TelegramClient_SendMessage_Call) Run(run func(ctx context.Context, chatId int64, message string)) *TelegramClient_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *TelegramClient_SendMessage_Call) Return(_a0 error) *TelegramClient_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelegramClient_SendMessage_Call) RunAndReturn(run func(context.Context, int64, string) error) *TelegramClient_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelegramClient creates a new instance of TelegramClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramClient {
	mock := &TelegramClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
