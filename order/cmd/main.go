package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/google/uuid"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/status"

	customMiddleware "github.com/Alexey-step/rocket-factory/order/internal/middleware"
	orderV1 "github.com/Alexey-step/rocket-factory/shared/pkg/openapi/order/v1"
	inventory_v1 "github.com/Alexey-step/rocket-factory/shared/pkg/proto/inventory/v1"
	payment_v1 "github.com/Alexey-step/rocket-factory/shared/pkg/proto/payment/v1"
)

const (
	httpPort          = 8080
	readHeaderTimeout = 5 * time.Second
	shutdownTimeout   = 10 * time.Second

	grpcInventory = "localhost:50051"
	grpcPayment   = "localhost:50052"
)

func main() {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC Inventory-—Å–µ—Ä–≤–∏—Å—É
	inventoryConn, err := grpc.NewClient(
		grpcInventory,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("failed to connect to invertory: %v\n", err)
		return
	}

	inventoryClient := inventory_v1.NewInventoryServiceClient(inventoryConn)

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC Payment-—Å–µ—Ä–≤–∏—Å—É
	paymentConn, err := grpc.NewClient(
		grpcPayment,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("failed to connect to payment: %v\n", err)
	}

	paymentClient := payment_v1.NewPaymentServiceClient(paymentConn)

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
	storage := NewOrderStorage()
	service := NewOrderService(storage, inventoryClient, paymentClient)

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∑–∞–∫–∞–∑–æ–≤ –¥–µ—Ç–∞–ª–µ–π
	orderHandler := NewOrderHandler(service)

	// –°–æ–∑–¥–∞–µ–º OpenAPI —Å–µ—Ä–≤–µ—Ä
	orderServer, err := orderV1.NewServer(orderHandler)
	if err != nil {
		if err := inventoryConn.Close(); err != nil {
			log.Printf("failed to close inventory connection: %v\n", err)
		}
		if err := paymentConn.Close(); err != nil {
			log.Printf("failed to close payment connection: %v\n", err)
		}
		log.Fatalf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ OpenAPI: %v", err)
	}

	defer func() {
		if err := inventoryConn.Close(); err != nil {
			log.Printf("failed to close inventory connection: %v\n", err)
		}
	}()
	defer func() {
		if err := paymentConn.Close(); err != nil {
			log.Printf("failed to close payment connection: %v\n", err)
		}
	}()

	r := chi.NewRouter()

	// –î–æ–±–∞–≤–ª—è–µ–º middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(customMiddleware.RequestLogger)
	r.Use(middleware.Timeout(10 * time.Second))

	r.Mount("/", orderServer)

	server := &http.Server{
		Addr:        fmt.Sprintf(":%d", httpPort),
		Handler:     r,
		ReadTimeout: readHeaderTimeout, // –ó–∞—â–∏—Ç–∞ –æ—Ç Slowloris –∞—Ç–∞–∫ - —Ç–∏–ø DDoS-–∞—Ç–∞–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π
		// –∞—Ç–∞–∫—É—é—â–∏–π —É–º—ã—à–ª–µ–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏, —É–¥–µ—Ä–∂–∏–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∏—Å—Ç–æ—â–∞—è
		// –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ReadHeaderTimeout –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
		// –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("üöÄ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %d\n", httpPort)
		err = server.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
	ctx, cancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer cancel()

	err = server.Shutdown(ctx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
	}

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

type OrderStorage interface {
	GetOrder(uuid string) *orderV1.OrderDto
	SaveOrder(order *orderV1.OrderDto)
}

type OrderStorageInMemory struct {
	mu     sync.RWMutex
	orders map[string]*orderV1.OrderDto
}

func NewOrderStorage() *OrderStorageInMemory {
	return &OrderStorageInMemory{
		orders: make(map[string]*orderV1.OrderDto),
	}
}

// GetOrder –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
func (s *OrderStorageInMemory) GetOrder(uuid string) *orderV1.OrderDto {
	s.mu.RLock()
	defer s.mu.RUnlock()
	return s.orders[uuid]
}

func (s *OrderStorageInMemory) SaveOrder(order *orderV1.OrderDto) {
	s.mu.RLock()
	defer s.mu.RUnlock()
	s.orders[order.OrderUUID.String()] = order
}

type OrderService struct {
	storage         OrderStorage
	paymentClient   payment_v1.PaymentServiceClient
	inventoryClient inventory_v1.InventoryServiceClient
}

func NewOrderService(
	orderStorage OrderStorage,
	inventoryClient inventory_v1.InventoryServiceClient,
	paymentClient payment_v1.PaymentServiceClient,
) *OrderService {
	return &OrderService{
		storage:         orderStorage,
		inventoryClient: inventoryClient,
		paymentClient:   paymentClient,
	}
}

func (s *OrderService) SaveOrder(order *orderV1.OrderDto) {
	s.storage.SaveOrder(order)
}

func (s *OrderService) GetOrder(uuid string) *orderV1.OrderDto {
	return s.storage.GetOrder(uuid)
}

func (s *OrderService) ListParts(ctx context.Context, filter *inventory_v1.PartsFilter) ([]*inventory_v1.Part, error) {
	res, err := s.inventoryClient.ListParts(ctx, &inventory_v1.ListPartsRequest{
		Filter: filter,
	})
	if err != nil {
		return nil, err
	}

	return res.GetParts(), nil
}

func (s *OrderService) PayOrder(ctx context.Context, orderUUID string, paymentMethod payment_v1.PaymentMethod, userUUID string) (*payment_v1.PayOrderResponse, error) {
	return s.paymentClient.PayOrder(ctx, &payment_v1.PayOrderRequest{
		OrderUuid:     orderUUID,
		PaymentMethod: paymentMethod,
		UserUuid:      userUUID,
	})
}

// OrderHandler —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å orderV1.Handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∑–∞–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π
type OrderHandler struct {
	service *OrderService
}

// NewOrderHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∑–∞–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π
func NewOrderHandler(service *OrderService) *OrderHandler {
	return &OrderHandler{
		service: service,
	}
}

func (h *OrderHandler) CreateOrder(ctx context.Context, req *orderV1.CreateOrderRequest) (orderV1.CreateOrderRes, error) {
	parseUUIDs := uuidsToStrings(req.GetPartUuids())

	filter := &inventory_v1.PartsFilter{
		Uuids: parseUUIDs,
	}

	partsList, err := h.service.ListParts(ctx, filter)
	if err != nil {
		st := status.Convert(err)
		switch st.Code() {
		case codes.NotFound:
			return &orderV1.NotFoundError{
				Code:    http.StatusNotFound,
				Message: "some parts not found: " + st.Message(),
			}, nil
		default:
			return &orderV1.InternalServerError{
				Code:    http.StatusInternalServerError,
				Message: "timeout when retrieving parts",
			}, nil
		}
	}

	if len(partsList) != len(parseUUIDs) {
		return &orderV1.BadRequestError{
			Code:    http.StatusBadRequest,
			Message: "one or more parts not found",
		}, nil
	}

	var totalPrice float64
	for _, part := range partsList {
		totalPrice += part.GetPrice()
	}

	orderUUID := uuid.New()

	order := &orderV1.OrderDto{
		OrderUUID:  orderUUID,
		UserUUID:   req.GetUserUUID(),
		PartUuids:  req.GetPartUuids(),
		TotalPrice: totalPrice,
		Status:     orderV1.OrderStatusPENDINGPAYMENT,
	}

	h.service.SaveOrder(order)

	return &orderV1.CreateOrderResponse{
		OrderUUID:  orderUUID,
		TotalPrice: totalPrice,
	}, nil
}

func (h *OrderHandler) GetOrder(_ context.Context, params orderV1.GetOrderParams) (orderV1.GetOrderRes, error) {
	order := h.service.GetOrder(params.OrderUUID.String())

	if order == nil {
		return &orderV1.NotFoundError{
			Code:    404,
			Message: "Order by this UUID`" + params.OrderUUID.String() + "` not found",
		}, nil
	}

	return &orderV1.GetOrderResponse{
		Data: *order,
	}, nil
}

func (h *OrderHandler) CancelOrder(_ context.Context, params orderV1.CancelOrderParams) (orderV1.CancelOrderRes, error) {
	order := h.service.GetOrder(params.OrderUUID.String())

	if order == nil {
		return &orderV1.NotFoundError{
			Code:    404,
			Message: "Order by this UUID`" + params.OrderUUID.String() + "` not found",
		}, nil
	}

	switch order.Status {
	case orderV1.OrderStatusPAID:
		return &orderV1.ConflictError{
			Code:    409,
			Message: "–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω—ë–Ω",
		}, nil
	case orderV1.OrderStatusCANCELLED:
		return &orderV1.ConflictError{
			Code:    409,
			Message: "–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω",
		}, nil
	case orderV1.OrderStatusPENDINGPAYMENT:
		order.Status = orderV1.OrderStatusCANCELLED
		return &orderV1.CancelOrderNoContent{}, nil
	default:
		return &orderV1.InternalServerError{
			Code:    500,
			Message: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
		}, nil
	}
}

func (h *OrderHandler) PayOrder(ctx context.Context, req *orderV1.PayOrderRequest, params orderV1.PayOrderParams) (orderV1.PayOrderRes, error) {
	order := h.service.GetOrder(params.OrderUUID.String())

	if order == nil {
		return &orderV1.NotFoundError{
			Code:    http.StatusNotFound,
			Message: "Order by this UUID`" + params.OrderUUID.String() + "` not found",
		}, nil
	}

	if resp, ok := canPayOrder(order); ok {
		return resp, nil
	}

	paymentMethod := mapOrderToPaymentMethod(req.GetPaymentMethod())

	out, err := h.service.PayOrder(ctx, order.OrderUUID.String(), paymentMethod, order.UserUUID.String())
	if err != nil {
		return &orderV1.InternalServerError{
			Code:    http.StatusInternalServerError,
			Message: "–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: " + err.Error(),
		}, nil
	}

	parsedUUID, err := uuid.Parse(out.TransactionUuid)
	if err != nil {
		return &orderV1.InternalServerError{
			Code:    http.StatusInternalServerError,
			Message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID –æ—Ç –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞",
		}, nil
	}

	order.Status = orderV1.OrderStatusPAID
	order.PaymentMethod = orderV1.OptPaymentMethod{Value: req.GetPaymentMethod()}
	order.TransactionUUID = orderV1.OptUUID{Value: parsedUUID}

	return &orderV1.PayOrderResponse{
		TransactionUUID: parsedUUID,
	}, nil
}

func (h *OrderHandler) NewError(_ context.Context, err error) *orderV1.GenericErrorStatusCode {
	return &orderV1.GenericErrorStatusCode{
		StatusCode: http.StatusInternalServerError,
		Response: orderV1.GenericError{
			Code:    http.StatusInternalServerError,
			Message: err.Error(),
		},
	}
}

func mapOrderToPaymentMethod(method orderV1.PaymentMethod) payment_v1.PaymentMethod {
	switch method {
	case orderV1.PaymentMethodCARD:
		return payment_v1.PaymentMethod_PAYMENT_METHOD_CARD
	case orderV1.PaymentMethodSBP:
		return payment_v1.PaymentMethod_PAYMENT_METHOD_SBP
	case orderV1.PaymentMethodCREDITCARD:
		return payment_v1.PaymentMethod_PAYMENT_METHOD_CREDIT_CARD
	case orderV1.PaymentMethodINVESTORMONEY:
		return payment_v1.PaymentMethod_PAYMENT_METHOD_INVESTOR_MONEY
	default:
		return payment_v1.PaymentMethod_PAYMENT_METHOD_UNSPECIFIED
	}
}

func uuidsToStrings(uuids []uuid.UUID) []string {
	strings := make([]string, len(uuids))
	for i, u := range uuids {
		strings[i] = u.String()
	}
	return strings
}

func canPayOrder(order *orderV1.OrderDto) (orderV1.PayOrderRes, bool) {
	switch order.Status {
	case orderV1.OrderStatusPAID:
		return &orderV1.ConflictError{
			Code:    http.StatusConflict,
			Message: "–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω",
		}, true
	case orderV1.OrderStatusCANCELLED:
		return &orderV1.ConflictError{
			Code:    http.StatusConflict,
			Message: "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω",
		}, true
	case orderV1.OrderStatusPENDINGPAYMENT:
		return nil, false
	default:
		return &orderV1.InternalServerError{
			Code:    http.StatusInternalServerError,
			Message: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
		}, true
	}
}
