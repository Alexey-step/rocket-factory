package middlewares

import (
	"log"
	"net/http"
	"time"

	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric"

	orderMetrics "github.com/Alexey-step/rocket-factory/order/internal/metrics"
)

// MetricsMiddleware —Å–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
func MetricsMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
		startTime := time.Now()

		// –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
		next.ServeHTTP(w, r)

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
		duration := time.Since(startTime)
		durationSeconds := duration.Seconds()

		log.Printf("üïê Request duration: %v (%f seconds) for method: %s", duration, durationSeconds, r.Method)

		orderMetrics.RequestDuration.Record(r.Context(), durationSeconds,
			metric.WithAttributes(
				attribute.String("method", r.Method),
			),
		)

		orderMetrics.RequestsTotal.Add(r.Context(), 1,
			metric.WithAttributes(
				attribute.String("method", r.Method),
			),
		)
	})
}
