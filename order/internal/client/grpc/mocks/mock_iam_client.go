// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	auth_v1 "github.com/Alexey-step/rocket-factory/shared/pkg/proto/auth/v1"

	mock "github.com/stretchr/testify/mock"
)

// IamClient is an autogenerated mock type for the IamClient type
type IamClient struct {
	mock.Mock
}

type IamClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IamClient) EXPECT() *IamClient_Expecter {
	return &IamClient_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, req
func (_m *IamClient) Login(ctx context.Context, req *auth_v1.LoginRequest) (*auth_v1.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *auth_v1.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.LoginRequest) (*auth_v1.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.LoginRequest) *auth_v1.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_v1.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth_v1.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IamClient_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type IamClient_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req *auth_v1.LoginRequest
func (_e *IamClient_Expecter) Login(ctx interface{}, req interface{}) *IamClient_Login_Call {
	return &IamClient_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *IamClient_Login_Call) Run(run func(ctx context.Context, req *auth_v1.LoginRequest)) *IamClient_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*auth_v1.LoginRequest))
	})
	return _c
}

func (_c *IamClient_Login_Call) Return(_a0 *auth_v1.LoginResponse, _a1 error) *IamClient_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IamClient_Login_Call) RunAndReturn(run func(context.Context, *auth_v1.LoginRequest) (*auth_v1.LoginResponse, error)) *IamClient_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Whoami provides a mock function with given fields: ctx, req
func (_m *IamClient) Whoami(ctx context.Context, req *auth_v1.WhoamiRequest) (*auth_v1.WhoamiResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Whoami")
	}

	var r0 *auth_v1.WhoamiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.WhoamiRequest) (*auth_v1.WhoamiResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.WhoamiRequest) *auth_v1.WhoamiResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_v1.WhoamiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth_v1.WhoamiRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IamClient_Whoami_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Whoami'
type IamClient_Whoami_Call struct {
	*mock.Call
}

// Whoami is a helper method to define mock.On call
//   - ctx context.Context
//   - req *auth_v1.WhoamiRequest
func (_e *IamClient_Expecter) Whoami(ctx interface{}, req interface{}) *IamClient_Whoami_Call {
	return &IamClient_Whoami_Call{Call: _e.mock.On("Whoami", ctx, req)}
}

func (_c *IamClient_Whoami_Call) Run(run func(ctx context.Context, req *auth_v1.WhoamiRequest)) *IamClient_Whoami_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*auth_v1.WhoamiRequest))
	})
	return _c
}

func (_c *IamClient_Whoami_Call) Return(_a0 *auth_v1.WhoamiResponse, _a1 error) *IamClient_Whoami_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IamClient_Whoami_Call) RunAndReturn(run func(context.Context, *auth_v1.WhoamiRequest) (*auth_v1.WhoamiResponse, error)) *IamClient_Whoami_Call {
	_c.Call.Return(run)
	return _c
}

// NewIamClient creates a new instance of IamClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIamClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IamClient {
	mock := &IamClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
