// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MetricsConfig is an autogenerated mock type for the MetricsConfig type
type MetricsConfig struct {
	mock.Mock
}

type MetricsConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricsConfig) EXPECT() *MetricsConfig_Expecter {
	return &MetricsConfig_Expecter{mock: &_m.Mock}
}

// CollectorEndpoint provides a mock function with no fields
func (_m *MetricsConfig) CollectorEndpoint() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CollectorEndpoint")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MetricsConfig_CollectorEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectorEndpoint'
type MetricsConfig_CollectorEndpoint_Call struct {
	*mock.Call
}

// CollectorEndpoint is a helper method to define mock.On call
func (_e *MetricsConfig_Expecter) CollectorEndpoint() *MetricsConfig_CollectorEndpoint_Call {
	return &MetricsConfig_CollectorEndpoint_Call{Call: _e.mock.On("CollectorEndpoint")}
}

func (_c *MetricsConfig_CollectorEndpoint_Call) Run(run func()) *MetricsConfig_CollectorEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsConfig_CollectorEndpoint_Call) Return(_a0 string) *MetricsConfig_CollectorEndpoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsConfig_CollectorEndpoint_Call) RunAndReturn(run func() string) *MetricsConfig_CollectorEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// CollectorEnvironment provides a mock function with no fields
func (_m *MetricsConfig) CollectorEnvironment() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CollectorEnvironment")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MetricsConfig_CollectorEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectorEnvironment'
type MetricsConfig_CollectorEnvironment_Call struct {
	*mock.Call
}

// CollectorEnvironment is a helper method to define mock.On call
func (_e *MetricsConfig_Expecter) CollectorEnvironment() *MetricsConfig_CollectorEnvironment_Call {
	return &MetricsConfig_CollectorEnvironment_Call{Call: _e.mock.On("CollectorEnvironment")}
}

func (_c *MetricsConfig_CollectorEnvironment_Call) Run(run func()) *MetricsConfig_CollectorEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsConfig_CollectorEnvironment_Call) Return(_a0 string) *MetricsConfig_CollectorEnvironment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsConfig_CollectorEnvironment_Call) RunAndReturn(run func() string) *MetricsConfig_CollectorEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// CollectorInterval provides a mock function with no fields
func (_m *MetricsConfig) CollectorInterval() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CollectorInterval")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MetricsConfig_CollectorInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectorInterval'
type MetricsConfig_CollectorInterval_Call struct {
	*mock.Call
}

// CollectorInterval is a helper method to define mock.On call
func (_e *MetricsConfig_Expecter) CollectorInterval() *MetricsConfig_CollectorInterval_Call {
	return &MetricsConfig_CollectorInterval_Call{Call: _e.mock.On("CollectorInterval")}
}

func (_c *MetricsConfig_CollectorInterval_Call) Run(run func()) *MetricsConfig_CollectorInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsConfig_CollectorInterval_Call) Return(_a0 time.Duration) *MetricsConfig_CollectorInterval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsConfig_CollectorInterval_Call) RunAndReturn(run func() time.Duration) *MetricsConfig_CollectorInterval_Call {
	_c.Call.Return(run)
	return _c
}

// CollectorServiceName provides a mock function with no fields
func (_m *MetricsConfig) CollectorServiceName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CollectorServiceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MetricsConfig_CollectorServiceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectorServiceName'
type MetricsConfig_CollectorServiceName_Call struct {
	*mock.Call
}

// CollectorServiceName is a helper method to define mock.On call
func (_e *MetricsConfig_Expecter) CollectorServiceName() *MetricsConfig_CollectorServiceName_Call {
	return &MetricsConfig_CollectorServiceName_Call{Call: _e.mock.On("CollectorServiceName")}
}

func (_c *MetricsConfig_CollectorServiceName_Call) Run(run func()) *MetricsConfig_CollectorServiceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsConfig_CollectorServiceName_Call) Return(_a0 string) *MetricsConfig_CollectorServiceName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsConfig_CollectorServiceName_Call) RunAndReturn(run func() string) *MetricsConfig_CollectorServiceName_Call {
	_c.Call.Return(run)
	return _c
}

// CollectorServiceVersion provides a mock function with no fields
func (_m *MetricsConfig) CollectorServiceVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CollectorServiceVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MetricsConfig_CollectorServiceVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectorServiceVersion'
type MetricsConfig_CollectorServiceVersion_Call struct {
	*mock.Call
}

// CollectorServiceVersion is a helper method to define mock.On call
func (_e *MetricsConfig_Expecter) CollectorServiceVersion() *MetricsConfig_CollectorServiceVersion_Call {
	return &MetricsConfig_CollectorServiceVersion_Call{Call: _e.mock.On("CollectorServiceVersion")}
}

func (_c *MetricsConfig_CollectorServiceVersion_Call) Run(run func()) *MetricsConfig_CollectorServiceVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsConfig_CollectorServiceVersion_Call) Return(_a0 string) *MetricsConfig_CollectorServiceVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsConfig_CollectorServiceVersion_Call) RunAndReturn(run func() string) *MetricsConfig_CollectorServiceVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetricsConfig creates a new instance of MetricsConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsConfig {
	mock := &MetricsConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
