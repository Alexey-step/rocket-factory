// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alexey-step/rocket-factory/order/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, userUUID, parts
func (_m *OrderRepository) CreateOrder(ctx context.Context, userUUID string, parts []model.Part) (model.OrderCreationInfo, error) {
	ret := _m.Called(ctx, userUUID, parts)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 model.OrderCreationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []model.Part) (model.OrderCreationInfo, error)); ok {
		return rf(ctx, userUUID, parts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []model.Part) model.OrderCreationInfo); ok {
		r0 = rf(ctx, userUUID, parts)
	} else {
		r0 = ret.Get(0).(model.OrderCreationInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []model.Part) error); ok {
		r1 = rf(ctx, userUUID, parts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderRepository_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
//   - parts []model.Part
func (_e *OrderRepository_Expecter) CreateOrder(ctx interface{}, userUUID interface{}, parts interface{}) *OrderRepository_CreateOrder_Call {
	return &OrderRepository_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, userUUID, parts)}
}

func (_c *OrderRepository_CreateOrder_Call) Run(run func(ctx context.Context, userUUID string, parts []model.Part)) *OrderRepository_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]model.Part))
	})
	return _c
}

func (_c *OrderRepository_CreateOrder_Call) Return(info model.OrderCreationInfo, err error) *OrderRepository_CreateOrder_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *OrderRepository_CreateOrder_Call) RunAndReturn(run func(context.Context, string, []model.Part) (model.OrderCreationInfo, error)) *OrderRepository_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: ctx, orderUUID
func (_m *OrderRepository) GetOrder(ctx context.Context, orderUUID string) (model.OrderData, error) {
	ret := _m.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 model.OrderData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.OrderData, error)); ok {
		return rf(ctx, orderUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.OrderData); ok {
		r0 = rf(ctx, orderUUID)
	} else {
		r0 = ret.Get(0).(model.OrderData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type OrderRepository_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *OrderRepository_Expecter) GetOrder(ctx interface{}, orderUUID interface{}) *OrderRepository_GetOrder_Call {
	return &OrderRepository_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderUUID)}
}

func (_c *OrderRepository_GetOrder_Call) Run(run func(ctx context.Context, orderUUID string)) *OrderRepository_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderRepository_GetOrder_Call) Return(order model.OrderData, err error) *OrderRepository_GetOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *OrderRepository_GetOrder_Call) RunAndReturn(run func(context.Context, string) (model.OrderData, error)) *OrderRepository_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function with given fields: ctx, orderUUID, orderUpdateInfo
func (_m *OrderRepository) UpdateOrder(ctx context.Context, orderUUID string, orderUpdateInfo model.OrderUpdateInfo) error {
	ret := _m.Called(ctx, orderUUID, orderUpdateInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.OrderUpdateInfo) error); ok {
		r0 = rf(ctx, orderUUID, orderUpdateInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type OrderRepository_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
//   - orderUpdateInfo model.OrderUpdateInfo
func (_e *OrderRepository_Expecter) UpdateOrder(ctx interface{}, orderUUID interface{}, orderUpdateInfo interface{}) *OrderRepository_UpdateOrder_Call {
	return &OrderRepository_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, orderUUID, orderUpdateInfo)}
}

func (_c *OrderRepository_UpdateOrder_Call) Run(run func(ctx context.Context, orderUUID string, orderUpdateInfo model.OrderUpdateInfo)) *OrderRepository_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(model.OrderUpdateInfo))
	})
	return _c
}

func (_c *OrderRepository_UpdateOrder_Call) Return(_a0 error) *OrderRepository_UpdateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_UpdateOrder_Call) RunAndReturn(run func(context.Context, string, model.OrderUpdateInfo) error) *OrderRepository_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
