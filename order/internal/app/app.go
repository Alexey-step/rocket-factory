package app

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/pkg/errors"
	"go.uber.org/zap"

	"github.com/Alexey-step/rocket-factory/order/internal/config"
	customMiddleware "github.com/Alexey-step/rocket-factory/order/internal/middleware"
	"github.com/Alexey-step/rocket-factory/platform/pkg/closer"
	"github.com/Alexey-step/rocket-factory/platform/pkg/logger"
	orderV1 "github.com/Alexey-step/rocket-factory/shared/pkg/openapi/order/v1"
)

const (
	readHeaderTimeout = 5 * time.Second
)

type App struct {
	diContainer *diContainer
	httpServer  *http.Server
}

func New(ctx context.Context) (*App, error) {
	a := &App{}

	err := a.initDeps(ctx)
	if err != nil {
		return nil, err
	}

	return a, nil
}

func (a *App) Run(ctx context.Context) error {
	// –ö–∞–Ω–∞–ª –¥–ª—è –æ—à–∏–±–æ–∫ –æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	errCh := make(chan error, 2)

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	// –ö–æ–Ω—Å—å—é–º–µ—Ä
	go func() {
		if err := a.runConsumer(ctx); err != nil {
			errCh <- errors.Errorf("consumer crashed: %v", err)
		}
	}()

	// HTTP —Å–µ—Ä–≤–µ—Ä
	go func() {
		if err := a.runHTTPServer(ctx); err != nil {
			errCh <- errors.Errorf("http server crashed: %v", err)
		}
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ –ª–∏–±–æ –æ—à–∏–±–∫–∏, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏–≥–Ω–∞–ª SIGINT/SIGTERM)
	select {
	case <-ctx.Done():
		logger.Info(ctx, "Shutdown signal received")
	case err := <-errCh:
		logger.Error(ctx, "Component crashed, shutting down", zap.Error(err))
		// –¢—Ä–∏–≥–≥–µ—Ä–∏–º cancel, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
		cancel()
		// –î–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (–µ—Å–ª–∏ –µ—Å—Ç—å graceful shutdown –≤–Ω—É—Ç—Ä–∏)
		<-ctx.Done()
		return err
	}

	return nil
}

func (a *App) initDeps(ctx context.Context) error {
	inits := []func(context.Context) error{
		a.initDI,
		a.initLogger,
		a.initCloser,
		a.initHTTPServer,
		a.initMigrations,
	}

	for _, f := range inits {
		err := f(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (a *App) initDI(_ context.Context) error {
	a.diContainer = NewDIContainer()
	return nil
}

func (a *App) initLogger(_ context.Context) error {
	return logger.Init(
		config.AppConfig().Logger.Level(),
		config.AppConfig().Logger.AsJson(),
	)
}

func (a *App) initMigrations(ctx context.Context) error {
	err := a.diContainer.Migrator(ctx).Up(ctx)
	if err != nil {
		logger.Error(ctx, "–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", zap.Error(err))
		return err
	}

	return nil
}

func (a *App) initCloser(_ context.Context) error {
	closer.SetLogger(logger.Logger())
	return nil
}

func (a *App) initHTTPServer(ctx context.Context) error {
	serv, err := orderV1.NewServer(a.diContainer.OrderV1API(ctx))
	if err != nil {
		panic(fmt.Sprintf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ OpenAPI: %v\n", err))
	}

	r := chi.NewRouter()

	// –î–æ–±–∞–≤–ª—è–µ–º middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(customMiddleware.RequestLogger)
	r.Use(middleware.Timeout(10 * time.Second))

	r.Mount("/", serv)

	a.httpServer = &http.Server{
		Addr:        config.AppConfig().OrderHTTP.Address(),
		Handler:     r,
		ReadTimeout: readHeaderTimeout, // –ó–∞—â–∏—Ç–∞ –æ—Ç Slowloris –∞—Ç–∞–∫ - —Ç–∏–ø DDoS-–∞—Ç–∞–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π
		// –∞—Ç–∞–∫—É—é—â–∏–π —É–º—ã—à–ª–µ–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏, —É–¥–µ—Ä–∂–∏–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∏—Å—Ç–æ—â–∞—è
		// –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ReadHeaderTimeout –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
		// –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
	}

	closer.AddNamed("HTTP server", func(ctx context.Context) error {
		err = a.httpServer.Shutdown(ctx)
		if err != nil {
			return err
		}
		return nil
	})

	return nil
}

func (a *App) runHTTPServer(ctx context.Context) error {
	logger.Info(ctx, fmt.Sprintf("üöÄ HTTP OrderService server listening on %s", config.AppConfig().OrderHTTP.Address()))

	err := a.httpServer.ListenAndServe()
	if err != nil {
		return err
	}

	return nil
}

func (a *App) runConsumer(ctx context.Context) error {
	logger.Info(ctx, "üöÄ OrderPaid Kafka consumer running")

	err := a.diContainer.OrderConsumerService(ctx).RunConsumer(ctx)
	if err != nil {
		return err
	}

	return nil
}
