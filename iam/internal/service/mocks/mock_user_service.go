// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alexey-step/rocket-factory/iam/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx, userUUID
func (_m *UserService) GetUser(ctx context.Context, userUUID string) (model.User, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.User, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, userUUID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *UserService_Expecter) GetUser(ctx interface{}, userUUID interface{}) *UserService_GetUser_Call {
	return &UserService_GetUser_Call{Call: _e.mock.On("GetUser", ctx, userUUID)}
}

func (_c *UserService_GetUser_Call) Run(run func(ctx context.Context, userUUID string)) *UserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUser_Call) Return(_a0 model.User, _a1 error) *UserService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUser_Call) RunAndReturn(run func(context.Context, string) (model.User, error)) *UserService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, userInfo, password
func (_m *UserService) Register(ctx context.Context, userInfo model.UserInfo, password string) (string, error) {
	ret := _m.Called(ctx, userInfo, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserInfo, string) (string, error)); ok {
		return rf(ctx, userInfo, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserInfo, string) string); ok {
		r0 = rf(ctx, userInfo, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserInfo, string) error); ok {
		r1 = rf(ctx, userInfo, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - userInfo model.UserInfo
//   - password string
func (_e *UserService_Expecter) Register(ctx interface{}, userInfo interface{}, password interface{}) *UserService_Register_Call {
	return &UserService_Register_Call{Call: _e.mock.On("Register", ctx, userInfo, password)}
}

func (_c *UserService_Register_Call) Run(run func(ctx context.Context, userInfo model.UserInfo, password string)) *UserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserInfo), args[2].(string))
	})
	return _c
}

func (_c *UserService_Register_Call) Return(userUUID string, err error) *UserService_Register_Call {
	_c.Call.Return(userUUID, err)
	return _c
}

func (_c *UserService_Register_Call) RunAndReturn(run func(context.Context, model.UserInfo, string) (string, error)) *UserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
