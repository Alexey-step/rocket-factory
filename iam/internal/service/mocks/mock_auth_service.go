// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alexey-step/rocket-factory/iam/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, login, password
func (_m *AuthService) Login(ctx context.Context, login string, password string) (string, error) {
	ret := _m.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - password string
func (_e *AuthService_Expecter) Login(ctx interface{}, login interface{}, password interface{}) *AuthService_Login_Call {
	return &AuthService_Login_Call{Call: _e.mock.On("Login", ctx, login, password)}
}

func (_c *AuthService_Login_Call) Run(run func(ctx context.Context, login string, password string)) *AuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthService_Login_Call) Return(sessionUUID string, err error) *AuthService_Login_Call {
	_c.Call.Return(sessionUUID, err)
	return _c
}

func (_c *AuthService_Login_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *AuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Whoami provides a mock function with given fields: ctx, sessionUUID
func (_m *AuthService) Whoami(ctx context.Context, sessionUUID string) (model.Session, model.User, error) {
	ret := _m.Called(ctx, sessionUUID)

	if len(ret) == 0 {
		panic("no return value specified for Whoami")
	}

	var r0 model.Session
	var r1 model.User
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Session, model.User, error)); ok {
		return rf(ctx, sessionUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Session); ok {
		r0 = rf(ctx, sessionUUID)
	} else {
		r0 = ret.Get(0).(model.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) model.User); ok {
		r1 = rf(ctx, sessionUUID)
	} else {
		r1 = ret.Get(1).(model.User)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, sessionUUID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuthService_Whoami_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Whoami'
type AuthService_Whoami_Call struct {
	*mock.Call
}

// Whoami is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionUUID string
func (_e *AuthService_Expecter) Whoami(ctx interface{}, sessionUUID interface{}) *AuthService_Whoami_Call {
	return &AuthService_Whoami_Call{Call: _e.mock.On("Whoami", ctx, sessionUUID)}
}

func (_c *AuthService_Whoami_Call) Run(run func(ctx context.Context, sessionUUID string)) *AuthService_Whoami_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthService_Whoami_Call) Return(_a0 model.Session, _a1 model.User, _a2 error) *AuthService_Whoami_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuthService_Whoami_Call) RunAndReturn(run func(context.Context, string) (model.Session, model.User, error)) *AuthService_Whoami_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
