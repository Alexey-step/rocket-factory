// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alexey-step/rocket-factory/iam/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, info, password
func (_m *UserRepository) Create(ctx context.Context, info model.UserInfo, password []byte) (string, error) {
	ret := _m.Called(ctx, info, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserInfo, []byte) (string, error)); ok {
		return rf(ctx, info, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserInfo, []byte) string); ok {
		r0 = rf(ctx, info, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserInfo, []byte) error); ok {
		r1 = rf(ctx, info, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - info model.UserInfo
//   - password []byte
func (_e *UserRepository_Expecter) Create(ctx interface{}, info interface{}, password interface{}) *UserRepository_Create_Call {
	return &UserRepository_Create_Call{Call: _e.mock.On("Create", ctx, info, password)}
}

func (_c *UserRepository_Create_Call) Run(run func(ctx context.Context, info model.UserInfo, password []byte)) *UserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserInfo), args[2].([]byte))
	})
	return _c
}

func (_c *UserRepository_Create_Call) Return(userUUID string, err error) *UserRepository_Create_Call {
	_c.Call.Return(userUUID, err)
	return _c
}

func (_c *UserRepository_Create_Call) RunAndReturn(run func(context.Context, model.UserInfo, []byte) (string, error)) *UserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, userUUID
func (_m *UserRepository) GetUser(ctx context.Context, userUUID string) (model.User, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.User, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, userUUID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *UserRepository_Expecter) GetUser(ctx interface{}, userUUID interface{}) *UserRepository_GetUser_Call {
	return &UserRepository_GetUser_Call{Call: _e.mock.On("GetUser", ctx, userUUID)}
}

func (_c *UserRepository_GetUser_Call) Run(run func(ctx context.Context, userUUID string)) *UserRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetUser_Call) Return(_a0 model.User, _a1 error) *UserRepository_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUser_Call) RunAndReturn(run func(context.Context, string) (model.User, error)) *UserRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByLogin provides a mock function with given fields: ctx, login, password
func (_m *UserRepository) GetUserByLogin(ctx context.Context, login string, password string) (model.User, error) {
	ret := _m.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.User, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.User); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLogin'
type UserRepository_GetUserByLogin_Call struct {
	*mock.Call
}

// GetUserByLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - password string
func (_e *UserRepository_Expecter) GetUserByLogin(ctx interface{}, login interface{}, password interface{}) *UserRepository_GetUserByLogin_Call {
	return &UserRepository_GetUserByLogin_Call{Call: _e.mock.On("GetUserByLogin", ctx, login, password)}
}

func (_c *UserRepository_GetUserByLogin_Call) Run(run func(ctx context.Context, login string, password string)) *UserRepository_GetUserByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepository_GetUserByLogin_Call) Return(_a0 model.User, _a1 error) *UserRepository_GetUserByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUserByLogin_Call) RunAndReturn(run func(context.Context, string, string) (model.User, error)) *UserRepository_GetUserByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
