// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Alexey-step/rocket-factory/iam/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

type SessionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRepository) EXPECT() *SessionRepository_Expecter {
	return &SessionRepository_Expecter{mock: &_m.Mock}
}

// AddSessionToUserSet provides a mock function with given fields: ctx, userUUID, sessionUUID
func (_m *SessionRepository) AddSessionToUserSet(ctx context.Context, userUUID string, sessionUUID string) error {
	ret := _m.Called(ctx, userUUID, sessionUUID)

	if len(ret) == 0 {
		panic("no return value specified for AddSessionToUserSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userUUID, sessionUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepository_AddSessionToUserSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSessionToUserSet'
type SessionRepository_AddSessionToUserSet_Call struct {
	*mock.Call
}

// AddSessionToUserSet is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
//   - sessionUUID string
func (_e *SessionRepository_Expecter) AddSessionToUserSet(ctx interface{}, userUUID interface{}, sessionUUID interface{}) *SessionRepository_AddSessionToUserSet_Call {
	return &SessionRepository_AddSessionToUserSet_Call{Call: _e.mock.On("AddSessionToUserSet", ctx, userUUID, sessionUUID)}
}

func (_c *SessionRepository_AddSessionToUserSet_Call) Run(run func(ctx context.Context, userUUID string, sessionUUID string)) *SessionRepository_AddSessionToUserSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SessionRepository_AddSessionToUserSet_Call) Return(_a0 error) *SessionRepository_AddSessionToUserSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepository_AddSessionToUserSet_Call) RunAndReturn(run func(context.Context, string, string) error) *SessionRepository_AddSessionToUserSet_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, session, user, ttl
func (_m *SessionRepository) Create(ctx context.Context, session model.Session, user model.User, ttl time.Duration) error {
	ret := _m.Called(ctx, session, user, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Session, model.User, time.Duration) error); ok {
		r0 = rf(ctx, session, user, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - session model.Session
//   - user model.User
//   - ttl time.Duration
func (_e *SessionRepository_Expecter) Create(ctx interface{}, session interface{}, user interface{}, ttl interface{}) *SessionRepository_Create_Call {
	return &SessionRepository_Create_Call{Call: _e.mock.On("Create", ctx, session, user, ttl)}
}

func (_c *SessionRepository_Create_Call) Run(run func(ctx context.Context, session model.Session, user model.User, ttl time.Duration)) *SessionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Session), args[2].(model.User), args[3].(time.Duration))
	})
	return _c
}

func (_c *SessionRepository_Create_Call) Return(_a0 error) *SessionRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepository_Create_Call) RunAndReturn(run func(context.Context, model.Session, model.User, time.Duration) error) *SessionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, sessionUUID
func (_m *SessionRepository) Get(ctx context.Context, sessionUUID string) (model.Session, model.User, error) {
	ret := _m.Called(ctx, sessionUUID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Session
	var r1 model.User
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Session, model.User, error)); ok {
		return rf(ctx, sessionUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Session); ok {
		r0 = rf(ctx, sessionUUID)
	} else {
		r0 = ret.Get(0).(model.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) model.User); ok {
		r1 = rf(ctx, sessionUUID)
	} else {
		r1 = ret.Get(1).(model.User)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, sessionUUID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SessionRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SessionRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionUUID string
func (_e *SessionRepository_Expecter) Get(ctx interface{}, sessionUUID interface{}) *SessionRepository_Get_Call {
	return &SessionRepository_Get_Call{Call: _e.mock.On("Get", ctx, sessionUUID)}
}

func (_c *SessionRepository_Get_Call) Run(run func(ctx context.Context, sessionUUID string)) *SessionRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionRepository_Get_Call) Return(_a0 model.Session, _a1 model.User, _a2 error) *SessionRepository_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SessionRepository_Get_Call) RunAndReturn(run func(context.Context, string) (model.Session, model.User, error)) *SessionRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
