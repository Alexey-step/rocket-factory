// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// SessionConfig is an autogenerated mock type for the SessionConfig type
type SessionConfig struct {
	mock.Mock
}

type SessionConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionConfig) EXPECT() *SessionConfig_Expecter {
	return &SessionConfig_Expecter{mock: &_m.Mock}
}

// TTL provides a mock function with no fields
func (_m *SessionConfig) TTL() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TTL")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// SessionConfig_TTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TTL'
type SessionConfig_TTL_Call struct {
	*mock.Call
}

// TTL is a helper method to define mock.On call
func (_e *SessionConfig_Expecter) TTL() *SessionConfig_TTL_Call {
	return &SessionConfig_TTL_Call{Call: _e.mock.On("TTL")}
}

func (_c *SessionConfig_TTL_Call) Run(run func()) *SessionConfig_TTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SessionConfig_TTL_Call) Return(_a0 time.Duration) *SessionConfig_TTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionConfig_TTL_Call) RunAndReturn(run func() time.Duration) *SessionConfig_TTL_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionConfig creates a new instance of SessionConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionConfig {
	mock := &SessionConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
