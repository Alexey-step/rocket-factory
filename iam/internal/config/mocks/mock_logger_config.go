// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LoggerConfig is an autogenerated mock type for the LoggerConfig type
type LoggerConfig struct {
	mock.Mock
}

type LoggerConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *LoggerConfig) EXPECT() *LoggerConfig_Expecter {
	return &LoggerConfig_Expecter{mock: &_m.Mock}
}

// AsJson provides a mock function with no fields
func (_m *LoggerConfig) AsJson() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AsJson")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LoggerConfig_AsJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsJson'
type LoggerConfig_AsJson_Call struct {
	*mock.Call
}

// AsJson is a helper method to define mock.On call
func (_e *LoggerConfig_Expecter) AsJson() *LoggerConfig_AsJson_Call {
	return &LoggerConfig_AsJson_Call{Call: _e.mock.On("AsJson")}
}

func (_c *LoggerConfig_AsJson_Call) Run(run func()) *LoggerConfig_AsJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoggerConfig_AsJson_Call) Return(_a0 bool) *LoggerConfig_AsJson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoggerConfig_AsJson_Call) RunAndReturn(run func() bool) *LoggerConfig_AsJson_Call {
	_c.Call.Return(run)
	return _c
}

// Level provides a mock function with no fields
func (_m *LoggerConfig) Level() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Level")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LoggerConfig_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type LoggerConfig_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
func (_e *LoggerConfig_Expecter) Level() *LoggerConfig_Level_Call {
	return &LoggerConfig_Level_Call{Call: _e.mock.On("Level")}
}

func (_c *LoggerConfig_Level_Call) Run(run func()) *LoggerConfig_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoggerConfig_Level_Call) Return(_a0 string) *LoggerConfig_Level_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoggerConfig_Level_Call) RunAndReturn(run func() string) *LoggerConfig_Level_Call {
	_c.Call.Return(run)
	return _c
}

// OtelEnabled provides a mock function with no fields
func (_m *LoggerConfig) OtelEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OtelEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LoggerConfig_OtelEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OtelEnabled'
type LoggerConfig_OtelEnabled_Call struct {
	*mock.Call
}

// OtelEnabled is a helper method to define mock.On call
func (_e *LoggerConfig_Expecter) OtelEnabled() *LoggerConfig_OtelEnabled_Call {
	return &LoggerConfig_OtelEnabled_Call{Call: _e.mock.On("OtelEnabled")}
}

func (_c *LoggerConfig_OtelEnabled_Call) Run(run func()) *LoggerConfig_OtelEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoggerConfig_OtelEnabled_Call) Return(_a0 bool) *LoggerConfig_OtelEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoggerConfig_OtelEnabled_Call) RunAndReturn(run func() bool) *LoggerConfig_OtelEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// OtelEndpoint provides a mock function with no fields
func (_m *LoggerConfig) OtelEndpoint() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OtelEndpoint")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LoggerConfig_OtelEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OtelEndpoint'
type LoggerConfig_OtelEndpoint_Call struct {
	*mock.Call
}

// OtelEndpoint is a helper method to define mock.On call
func (_e *LoggerConfig_Expecter) OtelEndpoint() *LoggerConfig_OtelEndpoint_Call {
	return &LoggerConfig_OtelEndpoint_Call{Call: _e.mock.On("OtelEndpoint")}
}

func (_c *LoggerConfig_OtelEndpoint_Call) Run(run func()) *LoggerConfig_OtelEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoggerConfig_OtelEndpoint_Call) Return(_a0 string) *LoggerConfig_OtelEndpoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoggerConfig_OtelEndpoint_Call) RunAndReturn(run func() string) *LoggerConfig_OtelEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// OtelServiceEnvironment provides a mock function with no fields
func (_m *LoggerConfig) OtelServiceEnvironment() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OtelServiceEnvironment")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LoggerConfig_OtelServiceEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OtelServiceEnvironment'
type LoggerConfig_OtelServiceEnvironment_Call struct {
	*mock.Call
}

// OtelServiceEnvironment is a helper method to define mock.On call
func (_e *LoggerConfig_Expecter) OtelServiceEnvironment() *LoggerConfig_OtelServiceEnvironment_Call {
	return &LoggerConfig_OtelServiceEnvironment_Call{Call: _e.mock.On("OtelServiceEnvironment")}
}

func (_c *LoggerConfig_OtelServiceEnvironment_Call) Run(run func()) *LoggerConfig_OtelServiceEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoggerConfig_OtelServiceEnvironment_Call) Return(_a0 string) *LoggerConfig_OtelServiceEnvironment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoggerConfig_OtelServiceEnvironment_Call) RunAndReturn(run func() string) *LoggerConfig_OtelServiceEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// OtelServiceName provides a mock function with no fields
func (_m *LoggerConfig) OtelServiceName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OtelServiceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LoggerConfig_OtelServiceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OtelServiceName'
type LoggerConfig_OtelServiceName_Call struct {
	*mock.Call
}

// OtelServiceName is a helper method to define mock.On call
func (_e *LoggerConfig_Expecter) OtelServiceName() *LoggerConfig_OtelServiceName_Call {
	return &LoggerConfig_OtelServiceName_Call{Call: _e.mock.On("OtelServiceName")}
}

func (_c *LoggerConfig_OtelServiceName_Call) Run(run func()) *LoggerConfig_OtelServiceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoggerConfig_OtelServiceName_Call) Return(_a0 string) *LoggerConfig_OtelServiceName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoggerConfig_OtelServiceName_Call) RunAndReturn(run func() string) *LoggerConfig_OtelServiceName_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoggerConfig creates a new instance of LoggerConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoggerConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoggerConfig {
	mock := &LoggerConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
