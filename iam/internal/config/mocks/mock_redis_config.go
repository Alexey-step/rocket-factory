// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// RedisConfig is an autogenerated mock type for the RedisConfig type
type RedisConfig struct {
	mock.Mock
}

type RedisConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisConfig) EXPECT() *RedisConfig_Expecter {
	return &RedisConfig_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with no fields
func (_m *RedisConfig) Address() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RedisConfig_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type RedisConfig_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *RedisConfig_Expecter) Address() *RedisConfig_Address_Call {
	return &RedisConfig_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *RedisConfig_Address_Call) Run(run func()) *RedisConfig_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisConfig_Address_Call) Return(_a0 string) *RedisConfig_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConfig_Address_Call) RunAndReturn(run func() string) *RedisConfig_Address_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectionTimeout provides a mock function with no fields
func (_m *RedisConfig) ConnectionTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConnectionTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// RedisConfig_ConnectionTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectionTimeout'
type RedisConfig_ConnectionTimeout_Call struct {
	*mock.Call
}

// ConnectionTimeout is a helper method to define mock.On call
func (_e *RedisConfig_Expecter) ConnectionTimeout() *RedisConfig_ConnectionTimeout_Call {
	return &RedisConfig_ConnectionTimeout_Call{Call: _e.mock.On("ConnectionTimeout")}
}

func (_c *RedisConfig_ConnectionTimeout_Call) Run(run func()) *RedisConfig_ConnectionTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisConfig_ConnectionTimeout_Call) Return(_a0 time.Duration) *RedisConfig_ConnectionTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConfig_ConnectionTimeout_Call) RunAndReturn(run func() time.Duration) *RedisConfig_ConnectionTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// Host provides a mock function with no fields
func (_m *RedisConfig) Host() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Host")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RedisConfig_Host_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Host'
type RedisConfig_Host_Call struct {
	*mock.Call
}

// Host is a helper method to define mock.On call
func (_e *RedisConfig_Expecter) Host() *RedisConfig_Host_Call {
	return &RedisConfig_Host_Call{Call: _e.mock.On("Host")}
}

func (_c *RedisConfig_Host_Call) Run(run func()) *RedisConfig_Host_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisConfig_Host_Call) Return(_a0 string) *RedisConfig_Host_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConfig_Host_Call) RunAndReturn(run func() string) *RedisConfig_Host_Call {
	_c.Call.Return(run)
	return _c
}

// IDLETimeout provides a mock function with no fields
func (_m *RedisConfig) IDLETimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IDLETimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// RedisConfig_IDLETimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IDLETimeout'
type RedisConfig_IDLETimeout_Call struct {
	*mock.Call
}

// IDLETimeout is a helper method to define mock.On call
func (_e *RedisConfig_Expecter) IDLETimeout() *RedisConfig_IDLETimeout_Call {
	return &RedisConfig_IDLETimeout_Call{Call: _e.mock.On("IDLETimeout")}
}

func (_c *RedisConfig_IDLETimeout_Call) Run(run func()) *RedisConfig_IDLETimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisConfig_IDLETimeout_Call) Return(_a0 time.Duration) *RedisConfig_IDLETimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConfig_IDLETimeout_Call) RunAndReturn(run func() time.Duration) *RedisConfig_IDLETimeout_Call {
	_c.Call.Return(run)
	return _c
}

// MaxIDLE provides a mock function with no fields
func (_m *RedisConfig) MaxIDLE() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxIDLE")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RedisConfig_MaxIDLE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxIDLE'
type RedisConfig_MaxIDLE_Call struct {
	*mock.Call
}

// MaxIDLE is a helper method to define mock.On call
func (_e *RedisConfig_Expecter) MaxIDLE() *RedisConfig_MaxIDLE_Call {
	return &RedisConfig_MaxIDLE_Call{Call: _e.mock.On("MaxIDLE")}
}

func (_c *RedisConfig_MaxIDLE_Call) Run(run func()) *RedisConfig_MaxIDLE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisConfig_MaxIDLE_Call) Return(_a0 int) *RedisConfig_MaxIDLE_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConfig_MaxIDLE_Call) RunAndReturn(run func() int) *RedisConfig_MaxIDLE_Call {
	_c.Call.Return(run)
	return _c
}

// Port provides a mock function with no fields
func (_m *RedisConfig) Port() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Port")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RedisConfig_Port_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Port'
type RedisConfig_Port_Call struct {
	*mock.Call
}

// Port is a helper method to define mock.On call
func (_e *RedisConfig_Expecter) Port() *RedisConfig_Port_Call {
	return &RedisConfig_Port_Call{Call: _e.mock.On("Port")}
}

func (_c *RedisConfig_Port_Call) Run(run func()) *RedisConfig_Port_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisConfig_Port_Call) Return(_a0 string) *RedisConfig_Port_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisConfig_Port_Call) RunAndReturn(run func() string) *RedisConfig_Port_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedisConfig creates a new instance of RedisConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisConfig {
	mock := &RedisConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
