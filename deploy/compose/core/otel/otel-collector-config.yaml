# Секция receivers (приемники) описывает, откуда OpenTelemetry Collector получает данные телеметрии
receivers:
  # OTLP (OpenTelemetry Protocol) - стандартный протокол для передачи телеметрии
  # Используется для приема данных от инструментированных приложений
  otlp:
    protocols:
      # gRPC протокол - бинарный протокол на основе HTTP/2, обеспечивает высокую производительность
      grpc:
        # Адрес, на котором коллектор слушает gRPC соединения
        # 0.0.0.0 означает "все сетевые интерфейсы"
        endpoint: 0.0.0.0:4317

# Секция processors (обработчики) описывает, как обрабатывать полученные данные
# перед отправкой их в экспортеры
processors:
  # Батчинг - группировка данных в пакеты для эффективной передачи
  batch:
    # Максимальный размер пакета (количество элементов)
    send_batch_size: 1000
    # Максимальное время ожидания перед отправкой неполного пакета
    timeout: 10s
    # Максимальное кол-во отправляемых элементов за один раз
    send_batch_max_size: 1000

  # Вероятностное семплирование - этот процессор управляет объемом собираемых данных
  # Применяется только к трейсам в соответствующем пайплайне
  probabilistic_sampler:
    # Процент трейсов, которые будут сохранены
    # 100% означает сохранение всех данных (хорошо для разработки)
    # В продакшене рекомендуется более низкий процент (1-10%) для снижения нагрузки
    sampling_percentage: 100

# Секция exporters (экспортеры) описывает, куда отправлять обработанные данные телеметрии
exporters:
  # Экспорт трейсов в Jaeger
  otlp/jaeger:
    endpoint: jaeger:4317 # Эндпоинт Jaeger, принимающий OTLP формат
    # Коллектор отправляет данные в Jaeger по gRPC
    # Jaeger слушает на порту 4317 для приема данных от коллектора
    tls:
      insecure: true # Отключение TLS для локальной разработки

  # Экспорт данных в логи - полезно для отладки
  debug:
    # Уровень детализации логов
    verbosity: detailed

# Секция service описывает, как компоненты (receivers, processors, exporters)
# соединяются вместе в рабочие пайплайны
service:
  # Настройки телеметрии для самого коллектора (метрики + healthcheck)
  telemetry:
    metrics:
      address: 0.0.0.0:8888 # Prometheus метрики для мониторинга и healthcheck

  # Определение пайплайнов для разных типов телеметрии
  pipelines:
    # Пайплайн для трейсов
    traces:
      # Используемые приемники данных
      receivers: [otlp]
      # Последовательность обработчиков для трансформации данных
      # ВАЖНО: сначала семплируем (отбрасываем лишние), потом батчуем (группируем нужные)
      processors: [probabilistic_sampler, batch]
      # Куда отправлять обработанные трейсы
      exporters: [otlp/jaeger, debug]