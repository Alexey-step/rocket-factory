# =============================================================================
# КОНФИГУРАЦИЯ OPENTELEMETRY COLLECTOR - ЦЕНТРАЛЬНЫЙ АГЕНТ СБОРА ТЕЛЕМЕТРИИ
# =============================================================================
#
# OpenTelemetry Collector - это универсальный агент для сбора, обработки и
# отправки телеметрических данных (метрики, трейсы, логи).
#
# Основные концепции:
# 1. RECEIVERS (приемники) - получают данные от приложений
# 2. PROCESSORS (обработчики) - трансформируют и обогащают данные
# 3. EXPORTERS (экспортеры) - отправляют данные в системы хранения
# 4. EXTENSIONS (расширения) - дополнительные возможности (health check, pprof)
# 5. PIPELINES (пайплайны) - связывают receivers, processors и exporters
#
# В нашей схеме: UFO App -> OpenTelemetry Collector -> Prometheus -> Grafana
# Collector получает метрики от UFO приложения и отправляет их в Prometheus

# =============================================================================
# RECEIVERS - ПРИЕМНИКИ ДАННЫХ ТЕЛЕМЕТРИИ
# =============================================================================
# Receivers определяют, КАК и ОТКУДА Collector получает телеметрические данные
# Это входные точки для метрик, трейсов и логов
receivers:
  # OTLP (OpenTelemetry Protocol) - стандартный протокол OpenTelemetry
  # Это современный, эффективный протокол для передачи всех типов телеметрии
  # Поддерживает как gRPC (бинарный), так и HTTP (JSON) форматы
  otlp:
    protocols:
      # gRPC протокол - рекомендуемый для production
      # Преимущества: высокая производительность, эффективное сжатие, streaming
      # Использует HTTP/2 и Protocol Buffers для оптимальной передачи данных
      grpc:
        # Адрес и порт для приема gRPC соединений
        # 0.0.0.0 означает "слушать на всех сетевых интерфейсах"
        endpoint: 0.0.0.0:${OTEL_GRPC_PORT}

# =============================================================================
# PROCESSORS - ОБРАБОТЧИКИ ДАННЫХ
# =============================================================================
# Processors трансформируют, фильтруют и обогащают телеметрические данные
# Они выполняются в порядке, указанном в pipeline
processors:
  # BATCH PROCESSOR - группировка данных в пакеты
  # Критически важен для производительности! Без него каждая метрика отправляется отдельно
  # Группирует множество метрик в один запрос, что значительно снижает нагрузку
  batch:
    # Размер пакета - сколько элементов группировать вместе
    # Больше = эффективнее сеть, но больше задержка и память
    send_batch_size: ${OTEL_BATCH_SIZE}
    # Максимальное время ожидания неполного пакета
    # Гарантирует, что данные не будут ждать слишком долго
    timeout: ${OTEL_BATCH_TIMEOUT}
    # Максимальное количество отправляемых элементов за один раз
    # Защищает от слишком больших пакетов
    send_batch_max_size: ${OTEL_BATCH_SIZE}

# =============================================================================
# EXPORTERS - ЭКСПОРТЕРЫ ДАННЫХ
# =============================================================================
# Exporters отправляют обработанные данные в системы хранения и анализа
# Это выходные точки телеметрических данных
exporters:
  # PROMETHEUS REMOTE WRITE - отправка метрик в Prometheus
  # Remote Write - это способ отправки метрик в Prometheus "проталкиванием" (push)
  # В отличие от обычного scraping, где Prometheus сам забирает данные
  prometheusremotewrite:
    # URL endpoint Prometheus для приема метрик
    # Prometheus автоматически предоставляет этот endpoint
    endpoint: http://${PROMETHEUS_HOST}:${PROMETHEUS_PORT}/api/v1/write

# =============================================================================
# SERVICE - КОНФИГУРАЦИЯ СЕРВИСА
# =============================================================================
# Секция service связывает все компоненты вместе и настраивает сам Collector
service:
  # Настройки телеметрии самого Collector
  # Collector тоже генерирует метрики о своей работе
  telemetry:
    # Метрики самого коллектора для мониторинга его состояния
    metrics:
      address: 0.0.0.0:8888 # Prometheus метрики коллектора

  # PIPELINES - ПАЙПЛАЙНЫ ОБРАБОТКИ ДАННЫХ
  # Пайплайн определяет путь данных: receiver -> processors -> exporters
  # Можно создать разные пайплайны для разных типов данных
  pipelines:
    # Пайплайн для метрик
    # Обрабатывает только метрики (счетчики, гистограммы, gauge)
    metrics:
      # Источники данных - получаем метрики от UFO приложения через OTLP
      receivers: [otlp]
      # Последовательность обработки данных (порядок важен!)
      # batch - группировка для эффективности отправки
      processors: [batch]
      # Отправляем обработанные метрики в Prometheus
      exporters: [prometheusremotewrite]

# =============================================================================
# ВАЖНЫЕ КОНЦЕПЦИИ OPENTELEMETRY:
# =============================================================================
#
# 1. ТЕЛЕМЕТРИЯ (TELEMETRY):
#    - Метрики: числовые измерения (CPU, память, количество запросов)
#    - Трейсы: информация о выполнении запросов через распределенную систему
#    - Логи: текстовые записи о событиях в приложении
#
# 2. ИНСТРУМЕНТАЦИЯ (INSTRUMENTATION):
#    - Автоматическая: SDK автоматически собирает стандартные метрики
#    - Ручная: разработчик добавляет custom метрики в код
#
# 3. СЕМАНТИЧЕСКИЕ КОНВЕНЦИИ:
#    - Стандартные имена метрик и атрибутов
#    - Обеспечивают совместимость между разными системами
#
# 4. РЕСУРСЫ (RESOURCES):
#    - Метаданные о системе: service.name, service.version, host.name
#    - Помогают идентифицировать источник телеметрии
#
# 5. ПРОИЗВОДИТЕЛЬНОСТЬ:
#    - Batch processor критически важен для производительности
#    - Memory limiter защищает от OOM (Out of Memory)
#    - Правильная настройка очередей предотвращает потерю данных