// Code generated for Alexey-step service
// Â© Alexey-step 2025.
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TracingConfig is an autogenerated mock type for the TracingConfig type
type TracingConfig struct {
	mock.Mock
}

type TracingConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *TracingConfig) EXPECT() *TracingConfig_Expecter {
	return &TracingConfig_Expecter{mock: &_m.Mock}
}

// CollectorEndpoint provides a mock function with no fields
func (_m *TracingConfig) CollectorEndpoint() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CollectorEndpoint")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TracingConfig_CollectorEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectorEndpoint'
type TracingConfig_CollectorEndpoint_Call struct {
	*mock.Call
}

// CollectorEndpoint is a helper method to define mock.On call
func (_e *TracingConfig_Expecter) CollectorEndpoint() *TracingConfig_CollectorEndpoint_Call {
	return &TracingConfig_CollectorEndpoint_Call{Call: _e.mock.On("CollectorEndpoint")}
}

func (_c *TracingConfig_CollectorEndpoint_Call) Run(run func()) *TracingConfig_CollectorEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TracingConfig_CollectorEndpoint_Call) Return(_a0 string) *TracingConfig_CollectorEndpoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TracingConfig_CollectorEndpoint_Call) RunAndReturn(run func() string) *TracingConfig_CollectorEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// Environment provides a mock function with no fields
func (_m *TracingConfig) Environment() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Environment")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TracingConfig_Environment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Environment'
type TracingConfig_Environment_Call struct {
	*mock.Call
}

// Environment is a helper method to define mock.On call
func (_e *TracingConfig_Expecter) Environment() *TracingConfig_Environment_Call {
	return &TracingConfig_Environment_Call{Call: _e.mock.On("Environment")}
}

func (_c *TracingConfig_Environment_Call) Run(run func()) *TracingConfig_Environment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TracingConfig_Environment_Call) Return(_a0 string) *TracingConfig_Environment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TracingConfig_Environment_Call) RunAndReturn(run func() string) *TracingConfig_Environment_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceName provides a mock function with no fields
func (_m *TracingConfig) ServiceName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TracingConfig_ServiceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceName'
type TracingConfig_ServiceName_Call struct {
	*mock.Call
}

// ServiceName is a helper method to define mock.On call
func (_e *TracingConfig_Expecter) ServiceName() *TracingConfig_ServiceName_Call {
	return &TracingConfig_ServiceName_Call{Call: _e.mock.On("ServiceName")}
}

func (_c *TracingConfig_ServiceName_Call) Run(run func()) *TracingConfig_ServiceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TracingConfig_ServiceName_Call) Return(_a0 string) *TracingConfig_ServiceName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TracingConfig_ServiceName_Call) RunAndReturn(run func() string) *TracingConfig_ServiceName_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceVersion provides a mock function with no fields
func (_m *TracingConfig) ServiceVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TracingConfig_ServiceVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceVersion'
type TracingConfig_ServiceVersion_Call struct {
	*mock.Call
}

// ServiceVersion is a helper method to define mock.On call
func (_e *TracingConfig_Expecter) ServiceVersion() *TracingConfig_ServiceVersion_Call {
	return &TracingConfig_ServiceVersion_Call{Call: _e.mock.On("ServiceVersion")}
}

func (_c *TracingConfig_ServiceVersion_Call) Run(run func()) *TracingConfig_ServiceVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TracingConfig_ServiceVersion_Call) Return(_a0 string) *TracingConfig_ServiceVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TracingConfig_ServiceVersion_Call) RunAndReturn(run func() string) *TracingConfig_ServiceVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewTracingConfig creates a new instance of TracingConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTracingConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *TracingConfig {
	mock := &TracingConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
