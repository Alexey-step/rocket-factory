syntax = "proto3";

package inventory.v1;

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/Alexey-step/rocket-factory/shared/pkg/proto/inventory/v1;inventory_v1";

service InventoryService {
  rpc GetPart (GetPartRequest) returns (GetPartResponse);

  rpc ListParts(ListPartsRequest) returns (ListPartsResponse);
}

// GetPartRequest представляет запрос на получение детали по UUID.
message GetPartRequest {
  string uuid = 1;
}

// GetPartResponse представляет ответ на получение детали по UUID.
message GetPartResponse {
  Part part = 1;
}

// Part - структура описания детали
message Part {
    string uuid	= 1; // Уникальный идентификатор детали
    string name	= 2; // Название детали
    string description = 3; // Описание детали
    double price = 4;	// Цена за единицу
    int64 stock_quantity = 5; // Количество на складе
    Category category = 6; //	Категория
    Dimensions dimensions = 7; //	Размеры детали
    Manufacturer manufacturer = 8; //	Информация о производителе
    repeated string tags = 9; // Теги для быстрого поиска
    map<string, Value> metadata	= 10; // Гибкие метаданные
    google.protobuf.Timestamp created_at = 11; //	timestamp	Дата создания
    google.protobuf.Timestamp updated_at = 12; //	timestamp	Дата обновления
}

// Category - енам категорий деталей
enum Category {
  CATEGORY_UNSPECIFIED = 0; // Неизвестная категория
  CATEGORY_ENGINE = 1; // Двигатель
  CATEGORY_FUEL = 2; // Топливо
  CATEGORY_PORTHOLE = 3; // Иллюминатор
  CATEGORY_WING = 4; // Крыло
}

// Dimensions - размеры деталей
message Dimensions {
    double length = 1; //	Длина в см
    double width = 2; // Ширина в см
    double height = 3; //	Высота в см
    double weight = 4; //	Вес в кг
}

// Manufacturer - информация о производителе
message Manufacturer {
    string name = 1; //	Название
    string country = 2; // Страна производства
    string website = 3;	// Сайт производителя
}

// Value - мета информация
message Value {
  oneof kind {
    string string_value = 1;
    int64 int64_value = 2;
    double double_value = 3;
    bool bool_value = 4;
  }
}

// ListPartsRequest представляет запрос на получение списка деталей по фильтрам.
message ListPartsRequest {
  optional PartsFilter filter = 1; // Фильтр по деталям (все поля опциональны)
}

// ListPartsResponse представляет ответ на получение списка деталей по фильтрам.
message ListPartsResponse {
  repeated Part parts = 1; // Список найденных деталей
}

// PartsFilter - возможные фильтры для получения списка деталей
message PartsFilter {
  repeated string uuids = 1 [(validate.rules).repeated.unique = true];
  repeated string names = 2 [(validate.rules).repeated.unique = true];
  repeated Category categories = 3;
  repeated string manufacturer_countries = 4 [(validate.rules).repeated.unique = true];
  repeated string tags = 5 [(validate.rules).repeated.unique = true];
}